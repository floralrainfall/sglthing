#guhhh

name: hosted-pure-workflow
on:
  push:
  workflow_dispatch:
  schedule:
  - cron: '0 1 * * FRI'

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. 
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: Make build directory
        run: mkdir build
        shell: bash
        
      - name: Install libxrandr
        shell: bash
        run: |    
           if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt install -y libglfw3-dev libode-dev libassimp-dev libcurl-dev libcglm-dev
           elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install glfw3 
           elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "idk what to do as mac"
           else
            echo "$RUNNER_OS not supported"
            exit 1
           fi
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        working-directory: build
        run: |
          cmake ..
      # Build (Release configuration only) the whole project with Ninja (which is spawn by CMake).
      - name: Build (Release configuration)
        working-directory: build
        run: |
          cmake --build --config Release ..
