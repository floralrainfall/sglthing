(load "gfx_utils.scm")
(load "game_lib.scm")

(define world-ptr ())

(load "shared/shared.scm")
(load "server/server.scm")
(load "client/client.scm")

(define box-model (quick-load-model "test/box.obj"))
(define test-guy-model (quick-load-model "test/test_guy.fbx"))
(define test-guy-animator (animator-create))
(define test-guy-animation-bundle (animation-bundle-create "test/test_guy.fbx" test-guy-model))
(define test-guy-texture (quick-load-texture "test/main_tex.png"))
(define box-transform (make-transform))
(define box-texture (quick-load-texture "pink_checkerboard.png"))
(set! (transform-sx box-transform) 64.0)
(set! (transform-sy box-transform) 1.0)
(set! (transform-sz box-transform) 64.0)
(set! (transform-rz box-transform) 1.0)
(set! (transform-rw box-transform) 0.0)
(update-transform box-transform)

(define test-guy-transform (make-transform))
(set! (transform-py test-guy-transform) 2.0)
;(set! (transform-sx test-guy-transform) 300.0)
;(set! (transform-sy test-guy-transform) 300.0)
;(set! (transform-sz test-guy-transform) 300.0)
(set! (transform-rz test-guy-transform) 1.0)
(set! (transform-rw test-guy-transform) 0.0)
(update-transform test-guy-transform)

;(define test-light (light-create))
;(light-set-clq test-light 1.0 0.007 0.0002)
;(light-set-ambient test-light 0.8 1.0 0.8)
;(light-set-diffuse test-light 0.2 1.0 0.3)
;(light-set-specular test-light 0.0 1.0 0.1)
;(light-set-position test-light -15.0 15.0 15.0)

(animator-set-animation test-guy-animator (animation-bundle-get test-guy-animation-bundle 0))

(define (script-frame world camera) (gfxutils-frame world camera) (gamelib-frame world camera) (set! world-ptr world)
    (if (input-get-focus) (gamelib-debug-3d-controller camera))
    (animator-update test-guy-animator (world-delta-time world)))

(define (script-frame-render world light-pass)
    (lightarea-use camera-light-area world)
    (gl-bind-texture 0 box-texture)
    (world-draw-object world normal-shader box-model box-transform)
    (gfxutils-set-animator light-pass test-guy-animator rigged-shader world)
    (gl-bind-texture 0 test-guy-texture)
    (world-draw-object world rigged-shader test-guy-model test-guy-transform))

(define (script-frame-ui world)
    (let ((ui-data (world-get-ui world))) (ui-draw-text ui-data 0 0 "Hullo World"))
    (let ((ui-data (world-get-ui world))) (ui-draw-text ui-data 0 16 (format #f "animator-current-time: ~A" (animator-current-time test-guy-animator)))))